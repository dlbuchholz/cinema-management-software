%!PS-Adobe-3.1 EPSF-3.0%%Title: FHDW_Logo_H_Farbe.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: ***%%CreationDate: 17.09.2006%%BoundingBox: 0 0 246 110%%HiResBoundingBox: 0 0 245.9361 109.0533%%CropBox: 0 0 245.9361 109.0533%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/exec_file	statusdict /currentfilenameextend known{		{			0 () /SubFileDecode filter cvx exec		}	}{				{cvx exec}	}ifelsedef/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		currentdict /lw_initializepage known not			{			/lw_initializepage /initializepage load def			/initializepage				{				lw_initializepage				/initializepage {} def				}def			}if		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: FHDW_Logo_H_Farbe.ai 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -109.054 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark300 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 109.054 li245.937 109.054 li245.937 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"136.081 19.4605 mo154.988 19.4605 li154.988 50.8213 li180.328 19.4605 li198.741 19.4605 li198.741 52.5064 li223.544 19.4605 li245.937 19.4605 li203.885 76.6846 li180.328 76.6846 li180.328 48.1609 li158.812 76.6846 li136.081 76.6846 li136.081 19.4605 lifalse sop1 0.7 0.3 0.4 cmykef0 76.6846 mo0 19.4605 li40.6558 19.4605 li40.6558 36.3565 li19.2559 36.3565 li19.2559 41.1404 li40.6558 41.1404 li40.6558 57.4082 li19.2559 57.4082 li19.2559 76.6846 li0 76.6846 li1 0.7 0.3 0.4 cmykef45.96 19.4605 mo65.064 19.4605 li65.064 39.5323 li84.8638 39.5323 li84.8638 19.4605 li103.813 19.4605 li103.813 76.6846 li84.8638 76.6846 li84.8638 57.4082 li65.064 57.4082 li65.064 76.6846 li45.96 76.6846 li45.96 19.4605 li1 0.7 0.3 0.4 cmykef103.813 40.3709 mo113.062 40.3709 li113.062 40.3709 118.802 41.211 119.175 47.9976 cv119.549 54.7842 119.175 47.9976 119.175 47.9976 cv119.175 47.9976 119.661 53.9439 113.062 55.5308 cv106.461 57.1177 113.062 55.5308 113.062 55.5308 cv103.813 55.5308 li103.813 40.3709 licp103.813 19.4605 mo115.453 19.4605 li115.453 19.4605 128.906 20.7911 136.081 32.6045 cv143.255 44.4178 136.081 32.6045 136.081 32.6045 cv136.081 63.7178 li136.081 63.7178 128.16 76.2232 114.2 76.6846 cv100.24 77.1456 114.2 76.6846 114.2 76.6846 cv101.925 76.7022 114.2 76.6846 114.2 76.6846 cv103.813 76.6846 li103.813 19.4605 li1 0.7 0.3 0.4 cmykef7.84913 0.173096 mo6.40577 0.173096 li6.40577 5.88941 li6.40577 7.82349 5.79981 9.15162 3.9375 9.15162 cv2.07569 9.15162 1.46924 7.82349 1.46924 5.88941 cv1.46924 0.173096 li0.025879 0.173096 li0.025879 6.07691 li0.025879 8.90626 1.45459 10.4219 3.9375 10.4219 cv6.42042 10.4219 7.84913 8.90626 7.84913 6.07691 cv7.84913 0.173096 li1 0.7 0.3 0.4 cmykef11.0489 10.2486 mo12.4922 10.2486 li12.4922 1.9629 li12.5215 1.9629 li17.0826 10.2486 li18.9302 10.2486 li18.9302 0.173096 li17.4869 0.173096 li17.4869 8.28541 li17.4581 8.28541 li13.0118 0.173096 li11.0489 0.173096 li11.0489 10.2486 li1 0.7 0.3 0.4 cmykef22.1153 10.2486 mo23.5591 10.2486 li23.5591 0.173096 li22.1153 0.173096 li22.1153 10.2486 li1 0.7 0.3 0.4 cmykef35.0152 0.173096 mo33.4996 0.173096 li30.3096 8.97828 li30.2808 8.97828 li27.1773 0.173096 li25.5606 0.173096 li29.357 10.2486 li31.1612 10.2486 li35.0152 0.173096 li1 0.7 0.3 0.4 cmykef37.0933 10.2486 mo42.7374 10.2486 li42.7374 8.97828 li38.5367 8.97828 li38.5367 5.65821 li42.3619 5.65821 li42.3619 4.38819 li38.5367 4.38819 li38.5367 1.44336 li42.7374 1.44336 li42.7374 0.173096 li37.0933 0.173096 li37.0933 10.2486 li1 0.7 0.3 0.4 cmykef45.5899 10.2486 mo47.0337 10.2486 li47.0337 5.77393 li47.9 5.77393 li48.6646 5.77393 49.1412 5.77393 49.5884 6.75538 cv51.1334 10.2486 li52.7784 10.2486 li50.8731 6.23584 li50.5557 5.615 50.3389 5.39844 49.8916 5.22535 cv49.8916 5.19629 li51.0611 4.99439 51.9703 4.12818 51.9703 2.90137 cv51.9703 0.490723 50.0503 0.173096 48.0582 0.173096 cv45.5899 0.173096 li45.5899 10.2486 licp47.0337 1.44336 mo48.4195 1.44336 li49.7471 1.44336 50.44 2.02076 50.44 2.93018 cv50.44 3.89747 49.6319 4.50342 48.2603 4.50342 cv47.0337 4.50342 li47.0337 1.44336 li1 0.7 0.3 0.4 cmykef59.9044 0.36084 mo59.2115 0.115235 58.4175 0 57.7535 0 cv55.9346 0 54.5201 0.952637 54.5201 2.74268 cv54.5201 5.87476 58.8506 5.25416 58.8506 7.50611 cv58.8506 8.6897 57.6958 9.15162 56.8731 9.15162 cv56.1368 9.15162 55.2706 8.8628 54.7798 8.66065 cv54.6358 10.0032 li55.2994 10.2198 55.9922 10.4219 56.6998 10.4219 cv58.7208 10.4219 60.3804 9.57007 60.3804 7.41944 cv60.3804 4.09937 56.0503 4.54688 56.0503 2.6128 cv56.0503 1.55884 57.003 1.27002 57.8111 1.27002 cv58.5616 1.27002 58.9659 1.39991 59.7022 1.68873 cv59.9044 0.36084 li1 0.7 0.3 0.4 cmykef62.9786 10.2486 mo64.4219 10.2486 li64.4219 0.173096 li62.9786 0.173096 li62.9786 10.2486 li1 0.7 0.3 0.4 cmykef69.628 10.2486 mo71.0718 10.2486 li71.0718 1.44336 li74.2042 1.44336 li74.2042 0.173096 li66.4957 0.173096 li66.4957 1.44336 li69.628 1.44336 li69.628 10.2486 li1 0.7 0.3 0.4 cmykef79.0923 10.2486 mo80.5357 10.2486 li80.5357 6.0337 li84.462 0.173096 li82.773 0.173096 li79.8428 4.69117 li76.8404 0.173096 li75.1514 0.173096 li79.0923 6.0337 li79.0923 10.2486 li1 0.7 0.3 0.4 cmykef91.8467 5.21094 mo91.8467 3.16114 92.9439 1.25586 95.1666 1.27002 cv97.3897 1.25586 98.4869 3.16114 98.4869 5.21094 cv98.4869 7.21729 97.4908 9.15162 95.1666 9.15162 cv92.8428 9.15162 91.8467 7.21729 91.8467 5.21094 cvcp90.3169 5.21094 mo90.3169 8.271 92.0923 10.4219 95.1666 10.4219 cv98.2413 10.4219 100.018 8.271 100.018 5.21094 cv100.018 2.22291 98.2271 0 95.1666 0 cv92.1065 0 90.3169 2.22291 90.3169 5.21094 cv1 0.7 0.3 0.4 cmykef102.61 10.2486 mo104.054 10.2486 li104.054 5.65821 li107.792 5.65821 li107.792 4.38819 li104.054 4.38819 li104.054 1.44336 li107.966 1.44336 li107.966 0.173096 li102.61 0.173096 li102.61 10.2486 li1 0.7 0.3 0.4 cmykef113.734 10.2486 mo115.25 10.2486 li116.275 7.70801 li121.211 7.70801 li122.236 10.2486 li123.81 10.2486 li119.551 0.173096 li118.036 0.173096 li113.734 10.2486 licp120.75 6.52442 mo116.737 6.52442 li118.743 1.53003 li120.75 6.52442 li1 0.7 0.3 0.4 cmykef127.255 1.44336 mo128.481 1.44336 li129.376 1.44336 130.705 1.90528 130.705 3.17554 cv130.705 4.50342 129.579 4.95118 128.684 4.95118 cv127.255 4.95118 li127.255 1.44336 licp125.811 10.2486 mo127.255 10.2486 li127.255 6.2212 li128.669 6.2212 li130.488 6.2212 132.235 5.42725 132.235 3.18995 cv132.235 0.894776 130.517 0.173096 128.453 0.173096 cv125.811 0.173096 li125.811 10.2486 li1 0.7 0.3 0.4 cmykef135.91 1.44336 mo137.137 1.44336 li138.032 1.44336 139.36 1.90528 139.36 3.17554 cv139.36 4.50342 138.234 4.95118 137.339 4.95118 cv135.91 4.95118 li135.91 1.44336 licp134.467 10.2486 mo135.91 10.2486 li135.91 6.2212 li137.325 6.2212 li139.144 6.2212 140.89 5.42725 140.89 3.18995 cv140.89 0.894776 139.172 0.173096 137.108 0.173096 cv134.467 0.173096 li134.467 10.2486 li1 0.7 0.3 0.4 cmykef143.194 10.2486 mo148.853 10.2486 li148.853 8.97828 li144.638 8.97828 li144.638 0.173096 li143.194 0.173096 li143.194 10.2486 li1 0.7 0.3 0.4 cmykef151.061 10.2486 mo152.505 10.2486 li152.505 0.173096 li151.061 0.173096 li151.061 10.2486 li1 0.7 0.3 0.4 cmykef155.776 10.2486 mo161.42 10.2486 li161.42 8.97828 li157.22 8.97828 li157.22 5.65821 li161.045 5.65821 li161.045 4.38819 li157.22 4.38819 li157.22 1.44336 li161.42 1.44336 li161.42 0.173096 li155.776 0.173096 li155.776 10.2486 li1 0.7 0.3 0.4 cmykef164.273 10.2486 mo167.247 10.2486 li170.567 10.2486 172.617 8.50196 172.617 5.12427 cv172.617 2.02076 170.235 0.173096 167.247 0.173096 cv164.273 0.173096 li164.273 10.2486 licp165.717 1.44336 mo167.406 1.44336 li169.484 1.44336 171.086 2.82911 171.086 5.18213 cv171.086 7.78028 169.715 8.97828 167.232 8.97828 cv165.717 8.97828 li165.717 1.44336 li1 0.7 0.3 0.4 cmykef185.064 0.36084 mo184.371 0.115235 183.577 0 182.913 0 cv181.094 0 179.68 0.952637 179.68 2.74268 cv179.68 5.87476 184.01 5.25416 184.01 7.50611 cv184.01 8.6897 182.855 9.15162 182.033 9.15162 cv181.296 9.15162 180.43 8.8628 179.939 8.66065 cv179.795 10.0032 li180.459 10.2198 181.152 10.4219 181.859 10.4219 cv183.88 10.4219 185.54 9.57007 185.54 7.41944 cv185.54 4.09937 181.21 4.54688 181.21 2.6128 cv181.21 1.55884 182.163 1.27002 182.971 1.27002 cv183.722 1.27002 184.126 1.39991 184.862 1.68873 cv185.064 0.36084 li1 0.7 0.3 0.4 cmykef195.211 0.432862 mo194.49 0.115235 193.725 0 192.945 0 cv189.871 0 187.619 2.06397 187.619 5.16749 cv187.619 8.37208 189.741 10.4219 192.931 10.4219 cv193.522 10.4219 194.461 10.3785 195.226 10.0611 cv195.139 8.66065 li194.634 8.96387 193.667 9.15162 192.945 9.15162 cv190.852 9.15162 189.149 7.57813 189.149 5.21094 cv189.149 2.94458 190.693 1.27002 193.017 1.27002 cv193.753 1.27002 194.461 1.45777 195.096 1.83301 cv195.211 0.432862 li1 0.7 0.3 0.4 cmykef197.588 10.2486 mo199.031 10.2486 li199.031 0.173096 li197.588 0.173096 li197.588 10.2486 li1 0.7 0.3 0.4 cmykef202.303 10.2486 mo207.947 10.2486 li207.947 8.97828 li203.747 8.97828 li203.747 5.65821 li207.572 5.65821 li207.572 4.38819 li203.747 4.38819 li203.747 1.44336 li207.947 1.44336 li207.947 0.173096 li202.303 0.173096 li202.303 10.2486 li1 0.7 0.3 0.4 cmykef210.872 10.2486 mo212.315 10.2486 li212.315 1.9629 li212.345 1.9629 li216.906 10.2486 li218.753 10.2486 li218.753 0.173096 li217.31 0.173096 li217.31 8.28541 li217.281 8.28541 li212.835 0.173096 li210.872 0.173096 li210.872 10.2486 li1 0.7 0.3 0.4 cmykef229.012 0.432862 mo228.29 0.115235 227.525 0 226.746 0 cv223.671 0 221.419 2.06397 221.419 5.16749 cv221.419 8.37208 223.541 10.4219 226.731 10.4219 cv227.323 10.4219 228.261 10.3785 229.026 10.0611 cv228.939 8.66065 li228.435 8.96387 227.467 9.15162 226.746 9.15162 cv224.652 9.15162 222.949 7.57813 222.949 5.21094 cv222.949 2.94458 224.494 1.27002 226.817 1.27002 cv227.554 1.27002 228.261 1.45777 228.896 1.83301 cv229.012 0.432862 li1 0.7 0.3 0.4 cmykef231.46 10.2486 mo237.104 10.2486 li237.104 8.97828 li232.904 8.97828 li232.904 5.65821 li236.729 5.65821 li236.729 4.38819 li232.904 4.38819 li232.904 1.44336 li237.104 1.44336 li237.104 0.173096 li231.46 0.173096 li231.46 10.2486 li1 0.7 0.3 0.4 cmykef244.822 0.36084 mo244.129 0.115235 243.335 0 242.671 0 cv240.852 0 239.438 0.952637 239.438 2.74268 cv239.438 5.87476 243.768 5.25416 243.768 7.50611 cv243.768 8.6897 242.613 9.15162 241.791 9.15162 cv241.054 9.15162 240.188 8.8628 239.697 8.66065 cv239.553 10.0032 li240.217 10.2198 240.91 10.4219 241.617 10.4219 cv243.638 10.4219 245.298 9.57007 245.298 7.41944 cv245.298 4.09937 240.968 4.54688 240.968 2.6128 cv240.968 1.55884 241.92 1.27002 242.729 1.27002 cv243.48 1.27002 243.884 1.39991 244.62 1.68873 cv244.822 0.36084 li1 0.7 0.3 0.4 cmykef88.1207 108.896 mo89.4332 108.896 li89.4332 104.723 li93.816 104.723 li93.816 108.896 li95.1285 108.896 li95.1285 99.7364 li93.816 99.7364 li93.816 103.568 li89.4332 103.568 li89.4332 99.7364 li88.1207 99.7364 li88.1207 108.896 li1 0.7 0.3 0.4 cmykef96.2828 108.896 mo97.6607 108.896 li98.5928 106.586 li103.081 106.586 li104.013 108.896 li105.443 108.896 li101.572 99.7364 li100.194 99.7364 li96.2828 108.896 licp102.661 105.511 mo99.0123 105.511 li100.837 100.97 li102.661 105.511 li1 0.7 0.3 0.4 cmykef106.519 108.896 mo107.831 108.896 li107.831 101.364 li107.857 101.364 li112.004 108.896 li113.684 108.896 li113.684 99.7364 li112.372 99.7364 li112.372 107.111 li112.345 107.111 li108.304 99.7364 li106.519 99.7364 li106.519 108.896 li1 0.7 0.3 0.4 cmykef115.757 108.896 mo117.069 108.896 li117.069 101.364 li117.096 101.364 li121.242 108.896 li122.922 108.896 li122.922 99.7364 li121.61 99.7364 li121.61 107.111 li121.584 107.111 li117.542 99.7364 li115.757 99.7364 li115.757 108.896 li1 0.7 0.3 0.4 cmykef125.927 104.316 mo125.927 102.453 126.924 100.721 128.945 100.734 cv130.966 100.721 131.963 102.453 131.963 104.316 cv131.963 106.141 131.058 107.899 128.945 107.899 cv126.833 107.899 125.927 106.141 125.927 104.316 cvcp124.536 104.316 mo124.536 107.099 126.15 109.054 128.945 109.054 cv131.74 109.054 133.354 107.099 133.354 104.316 cv133.354 101.6 131.727 99.5787 128.945 99.5787 cv126.163 99.5787 124.536 101.6 124.536 104.316 cv1 0.7 0.3 0.4 cmykef142.487 99.7364 mo141.109 99.7364 li138.209 107.742 li138.183 107.742 li135.362 99.7364 li133.892 99.7364 li137.343 108.896 li138.983 108.896 li142.487 99.7364 li1 0.7 0.3 0.4 cmykef143.567 108.896 mo148.698 108.896 li148.698 107.742 li144.88 107.742 li144.88 104.723 li148.357 104.723 li148.357 103.568 li144.88 103.568 li144.88 100.892 li148.698 100.892 li148.698 99.7364 li143.567 99.7364 li143.567 108.896 li1 0.7 0.3 0.4 cmykef150.483 108.896 mo151.795 108.896 li151.795 104.828 li152.583 104.828 li153.278 104.828 153.711 104.828 154.118 105.721 cv155.522 108.896 li157.018 108.896 li155.286 105.248 li154.998 104.684 154.801 104.487 154.394 104.33 cv154.394 104.303 li155.457 104.12 156.283 103.332 156.283 102.217 cv156.283 100.025 154.538 99.7364 152.727 99.7364 cv150.483 99.7364 li150.483 108.896 licp151.795 100.892 mo153.055 100.892 li154.263 100.892 154.893 101.417 154.893 102.243 cv154.893 103.123 154.158 103.673 152.911 103.673 cv151.795 103.673 li151.795 100.892 li1 0.7 0.3 0.4 cmykef0.034668 94.7759 mo1.34668 94.7759 li1.34668 90.6026 li4.74561 90.6026 li4.74561 89.4478 li1.34668 89.4478 li1.34668 86.771 li4.90284 86.771 li4.90284 85.6163 li0.034668 85.6163 li0.034668 94.7759 li1 0.7 0.3 0.4 cmykef4.91456 94.7759 mo6.29249 94.7759 li7.22413 92.4664 li11.7125 92.4664 li12.6441 94.7759 li14.0743 94.7759 li10.2032 85.6163 li8.8252 85.6163 li4.91456 94.7759 licp11.2925 91.3902 mo7.64405 91.3902 li9.46827 86.8497 li11.2925 91.3902 li1 0.7 0.3 0.4 cmykef21.3638 85.8526 mo20.7076 85.5635 20.0123 85.459 19.3038 85.459 cv16.5084 85.459 14.4615 87.3355 14.4615 90.1568 cv14.4615 93.0699 16.3902 94.9332 19.2906 94.9332 cv19.8287 94.9332 20.6817 94.8941 21.377 94.605 cv21.2984 93.3321 li20.8389 93.608 19.9595 93.7784 19.3038 93.7784 cv17.4009 93.7784 15.8526 92.3482 15.8526 90.1958 cv15.8526 88.1358 17.2564 86.6133 19.3692 86.6133 cv20.0386 86.6133 20.6817 86.7842 21.2588 87.125 cv21.3638 85.8526 li1 0.7 0.3 0.4 cmykef22.5518 94.7759 mo23.8638 94.7759 li23.8638 90.6026 li28.2466 90.6026 li28.2466 94.7759 li29.5591 94.7759 li29.5591 85.6163 li28.2466 85.6163 li28.2466 89.4478 li23.8638 89.4478 li23.8638 85.6163 li22.5518 85.6163 li22.5518 94.7759 li1 0.7 0.3 0.4 cmykef31.7896 94.7759 mo33.1021 94.7759 li33.1021 90.6026 li37.4849 90.6026 li37.4849 94.7759 li38.7974 94.7759 li38.7974 85.6163 li37.4849 85.6163 li37.4849 89.4478 li33.1021 89.4478 li33.1021 85.6163 li31.7896 85.6163 li31.7896 94.7759 li1 0.7 0.3 0.4 cmykef41.8809 90.1958 mo41.8809 88.3326 42.878 86.6006 44.899 86.6133 cv46.92 86.6006 47.9175 88.3326 47.9175 90.1958 cv47.9175 92.0201 47.0118 93.7784 44.899 93.7784 cv42.7862 93.7784 41.8809 92.0201 41.8809 90.1958 cvcp40.4898 90.1958 mo40.4898 92.9781 42.1041 94.9332 44.899 94.9332 cv47.6944 94.9332 49.3082 92.9781 49.3082 90.1958 cv49.3082 87.4795 47.6812 85.459 44.899 85.459 cv42.1172 85.459 40.4898 87.4795 40.4898 90.1958 cv1 0.7 0.3 0.4 cmykef57.3653 85.8526 mo56.709 85.5635 56.0137 85.459 55.3047 85.459 cv52.5098 85.459 50.4625 87.3355 50.4625 90.1568 cv50.4625 93.0699 52.3916 94.9332 55.2916 94.9332 cv55.8296 94.9332 56.6827 94.8941 57.378 94.605 cv57.2994 93.3321 li56.8404 93.608 55.961 93.7784 55.3047 93.7784 cv53.4019 93.7784 51.8536 92.3482 51.8536 90.1958 cv51.8536 88.1358 53.2579 86.6133 55.3707 86.6133 cv56.0396 86.6133 56.6827 86.7842 57.2603 87.125 cv57.3653 85.8526 li1 0.7 0.3 0.4 cmykef58.7823 94.7759 mo60.0948 94.7759 li60.0948 90.6026 li64.4776 90.6026 li64.4776 94.7759 li65.7901 94.7759 li65.7901 85.6163 li64.4776 85.6163 li64.4776 89.4478 li60.0948 89.4478 li60.0948 85.6163 li58.7823 85.6163 li58.7823 94.7759 li1 0.7 0.3 0.4 cmykef72.2984 85.7867 mo71.6685 85.5635 70.9468 85.459 70.3433 85.459 cv68.69 85.459 67.4039 86.3248 67.4039 87.9522 cv67.4039 90.7999 71.3404 90.2354 71.3404 92.2823 cv71.3404 93.3584 70.2906 93.7784 69.543 93.7784 cv68.8736 93.7784 68.086 93.5162 67.6402 93.3321 cv67.5088 94.5528 li68.1124 94.7496 68.7422 94.9332 69.3853 94.9332 cv71.2227 94.9332 72.7315 94.1592 72.7315 92.2037 cv72.7315 89.1856 68.795 89.5923 68.795 87.834 cv68.795 86.876 69.6607 86.6133 70.396 86.6133 cv71.0782 86.6133 71.4458 86.7315 72.1148 86.9942 cv72.2984 85.7867 li1 0.7 0.3 0.4 cmykef80.7149 85.8526 mo80.0591 85.5635 79.3633 85.459 78.6548 85.459 cv75.8599 85.459 73.8126 87.3355 73.8126 90.1568 cv73.8126 93.0699 75.7418 94.9332 78.6416 94.9332 cv79.1797 94.9332 80.0328 94.8941 80.7281 94.605 cv80.6495 93.3321 li80.19 93.608 79.3111 93.7784 78.6548 93.7784 cv76.752 93.7784 75.2037 92.3482 75.2037 90.1958 cv75.2037 88.1358 76.6075 86.6133 78.7203 86.6133 cv79.3897 86.6133 80.0328 86.7842 80.6099 87.125 cv80.7149 85.8526 li1 0.7 0.3 0.4 cmykef82.1324 94.7759 mo83.4444 94.7759 li83.4444 90.6026 li87.8277 90.6026 li87.8277 94.7759 li89.1397 94.7759 li89.1397 85.6163 li87.8277 85.6163 li87.8277 89.4478 li83.4444 89.4478 li83.4444 85.6163 li82.1324 85.6163 li82.1324 94.7759 li1 0.7 0.3 0.4 cmykef98.4307 85.6163 mo97.1182 85.6163 li97.1182 90.8126 li97.1182 92.5713 96.5669 93.7784 94.8741 93.7784 cv93.1812 93.7784 92.6304 92.5713 92.6304 90.8126 cv92.6304 85.6163 li91.3179 85.6163 li91.3179 90.9834 li91.3179 93.5552 92.6172 94.9332 94.8741 94.9332 cv97.1314 94.9332 98.4307 93.5552 98.4307 90.9834 cv98.4307 85.6163 li1 0.7 0.3 0.4 cmykef100.53 94.7759 mo105.674 94.7759 li105.674 93.6211 li101.843 93.6211 li101.843 85.6163 li100.53 85.6163 li100.53 94.7759 li1 0.7 0.3 0.4 cmykef106.939 94.7759 mo112.07 94.7759 li112.07 93.6211 li108.251 93.6211 li108.251 90.6026 li111.729 90.6026 li111.729 89.4478 li108.251 89.4478 li108.251 86.771 li112.07 86.771 li112.07 85.6163 li106.939 85.6163 li106.939 94.7759 li1 0.7 0.3 0.4 cmykef117.989 94.7759 mo119.302 94.7759 li119.302 90.6026 li122.7 90.6026 li122.7 89.4478 li119.302 89.4478 li119.302 86.771 li122.858 86.771 li122.858 85.6163 li117.989 85.6163 li117.989 94.7759 li1 0.7 0.3 0.4 cmykef126.274 84.855 mo127.508 84.855 li127.508 83.543 li126.274 83.543 li126.274 84.855 licp128.427 84.855 mo129.66 84.855 li129.66 83.543 li128.427 83.543 li128.427 84.855 licp131.524 85.6163 mo130.211 85.6163 li130.211 90.8126 li130.211 92.5713 129.66 93.7784 127.967 93.7784 cv126.274 93.7784 125.724 92.5713 125.724 90.8126 cv125.724 85.6163 li124.411 85.6163 li124.411 90.9834 li124.411 93.5552 125.71 94.9332 127.967 94.9332 cv130.225 94.9332 131.524 93.5552 131.524 90.9834 cv131.524 85.6163 li1 0.7 0.3 0.4 cmykef133.558 94.7759 mo134.87 94.7759 li134.87 90.7081 li135.657 90.7081 li136.353 90.7081 136.786 90.7081 137.192 91.6002 cv138.597 94.7759 li140.093 94.7759 li138.36 91.1275 li138.072 90.5635 137.875 90.3668 137.468 90.209 cv137.468 90.1827 li138.531 89.9991 139.358 89.212 139.358 88.0962 cv139.358 85.9048 137.612 85.6163 135.802 85.6163 cv133.558 85.6163 li133.558 94.7759 licp134.87 86.771 mo136.13 86.771 li137.337 86.771 137.967 87.296 137.967 88.1226 cv137.967 89.002 137.232 89.5528 135.985 89.5528 cv134.87 89.5528 li134.87 86.771 li1 0.7 0.3 0.4 cmykef145.474 94.7759 mo148.177 94.7759 li151.195 94.7759 153.059 93.188 153.059 90.1172 cv153.059 87.296 150.894 85.6163 148.177 85.6163 cv145.474 85.6163 li145.474 94.7759 licp146.786 86.771 mo148.321 86.771 li150.211 86.771 151.668 88.0308 151.668 90.17 cv151.668 92.5318 150.421 93.6211 148.164 93.6211 cv146.786 93.6211 li146.786 86.771 li1 0.7 0.3 0.4 cmykef154.791 94.7759 mo156.103 94.7759 li156.103 85.6163 li154.791 85.6163 li154.791 94.7759 li1 0.7 0.3 0.4 cmykef158.27 94.7759 mo163.4 94.7759 li163.4 93.6211 li159.582 93.6211 li159.582 90.6026 li163.06 90.6026 li163.06 89.4478 li159.582 89.4478 li159.582 86.771 li163.4 86.771 li163.4 85.6163 li158.27 85.6163 li158.27 94.7759 li1 0.7 0.3 0.4 cmykef171.026 94.7759 mo172.784 94.7759 li174.792 86.771 li174.818 86.771 li176.813 94.7759 li178.506 94.7759 li181.327 85.6163 li179.936 85.6163 li177.745 93.4634 li177.718 93.4634 li175.737 85.6163 li173.874 85.6163 li171.918 93.4634 li171.892 93.4634 li169.701 85.6163 li168.257 85.6163 li171.026 94.7759 li1 0.7 0.3 0.4 cmykef182.288 94.7759 mo183.601 94.7759 li183.601 85.6163 li182.288 85.6163 li182.288 94.7759 li1 0.7 0.3 0.4 cmykef185.623 94.7759 mo186.935 94.7759 li186.935 90.7081 li187.722 90.7081 li188.418 90.7081 188.851 90.7081 189.258 91.6002 cv190.662 94.7759 li192.158 94.7759 li190.426 91.1275 li190.137 90.5635 189.94 90.3668 189.533 90.209 cv189.533 90.1827 li190.596 89.9991 191.423 89.212 191.423 88.0962 cv191.423 85.9048 189.678 85.6163 187.867 85.6163 cv185.623 85.6163 li185.623 94.7759 licp186.935 86.771 mo188.195 86.771 li189.402 86.771 190.032 87.296 190.032 88.1226 cv190.032 89.002 189.297 89.5528 188.05 89.5528 cv186.935 89.5528 li186.935 86.771 li1 0.7 0.3 0.4 cmykef195.071 94.7759 mo196.383 94.7759 li196.383 86.771 li199.231 86.771 li199.231 85.6163 li192.224 85.6163 li192.224 86.771 li195.071 86.771 li195.071 94.7759 li1 0.7 0.3 0.4 cmykef204.651 85.7867 mo204.021 85.5635 203.299 85.459 202.695 85.459 cv201.042 85.459 199.756 86.3248 199.756 87.9522 cv199.756 90.7999 203.693 90.2354 203.693 92.2823 cv203.693 93.3584 202.643 93.7784 201.895 93.7784 cv201.226 93.7784 200.438 93.5162 199.992 93.3321 cv199.861 94.5528 li200.465 94.7496 201.095 94.9332 201.737 94.9332 cv203.575 94.9332 205.084 94.1592 205.084 92.2037 cv205.084 89.1856 201.147 89.5923 201.147 87.834 cv201.147 86.876 202.013 86.6133 202.748 86.6133 cv203.43 86.6133 203.798 86.7315 204.467 86.9942 cv204.651 85.7867 li1 0.7 0.3 0.4 cmykef213.067 85.8526 mo212.411 85.5635 211.715 85.459 211.007 85.459 cv208.212 85.459 206.165 87.3355 206.165 90.1568 cv206.165 93.0699 208.094 94.9332 210.994 94.9332 cv211.532 94.9332 212.385 94.8941 213.081 94.605 cv213.001 93.3321 li212.542 93.608 211.663 93.7784 211.007 93.7784 cv209.104 93.7784 207.556 92.3482 207.556 90.1958 cv207.556 88.1358 208.96 86.6133 211.073 86.6133 cv211.742 86.6133 212.385 86.7842 212.962 87.125 cv213.067 85.8526 li1 0.7 0.3 0.4 cmykef214.484 94.7759 mo215.797 94.7759 li215.797 90.6026 li220.18 90.6026 li220.18 94.7759 li221.492 94.7759 li221.492 85.6163 li220.18 85.6163 li220.18 89.4478 li215.797 89.4478 li215.797 85.6163 li214.484 85.6163 li214.484 94.7759 li1 0.7 0.3 0.4 cmykef222.646 94.7759 mo224.024 94.7759 li224.956 92.4664 li229.444 92.4664 li230.376 94.7759 li231.806 94.7759 li227.935 85.6163 li226.557 85.6163 li222.646 94.7759 licp229.024 91.3902 mo225.376 91.3902 li227.2 86.8497 li229.024 91.3902 li1 0.7 0.3 0.4 cmykef232.816 94.7759 mo234.129 94.7759 li234.129 90.6026 li237.527 90.6026 li237.527 89.4478 li234.129 89.4478 li234.129 86.771 li237.685 86.771 li237.685 85.6163 li232.816 85.6163 li232.816 94.7759 li1 0.7 0.3 0.4 cmykef241.049 94.7759 mo242.361 94.7759 li242.361 86.771 li245.209 86.771 li245.209 85.6163 li238.202 85.6163 li238.202 86.771 li241.049 86.771 li241.049 94.7759 li1 0.7 0.3 0.4 cmykef%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (***) (***)%%Title: (FHDW_Logo_H_Farbe.eps)%%CreationDate: 17.09.2006 13:14 Uhr%AI9_DataStream%Gb!T<$^2OMOllTCr.g<Bi!&AQ^j86+Mi5A\B!(Yq@Yg1K3hM$*c9NXU(gmDtO\G`Mc-1KF!BhX'p"A+.g*6CZH=U&gAS#IR24m"!%miQ^3S)'S0rbnD=;WtqX4_Q>MkOmoXP<Ws!>2Ps<R9JRJi)Bu!#&WAL(hK@tRL8@#e6D@E+)]]Bj,:hSH@::XfPgM>qbN!d]@Cfo%I.[^#XG62pg[5!<@D6#Qs"J^RqoldcghbT/qnqgd34PqQ9Y[=%hqUR>W/eV+r7ULaqf&lj!L;7qTA@BMH[OdZdI3Ffit2QO*[MB(%q#%`gEC'ZMJ"HZ$`TmGO%6Yb]=RZ7c$jt<EF/dKPlat\UFkl>-cs!I?'OD9mp%PMBm4f2/Zr6DbphYHrraklq%Y8u,j9>X7V>mGX%\arXKo&g[Cs(fU!J)P<'keU(S04$37$^KR10c1::<A#pHC&]UpM*q(2qY"g=3j)&U>.?jg=8pJk5T]agTI!,k$pgocY"<m:j(A8=%V]aRVc0i*VJ")2]`TB2fF`oaYh#%T/F&EH2We>ioY[&?bfkla'8d*+4mIU;$HCH(XHb!FU*;N.PIoCp%=,/a#,O"??qg`1:Uuk`c%4PX8FhQ9ZB9^:QZ]CkUXrL\r#:UH'Jn.m=DJ?S1STTZD3@(;kMF''<\Q8ZF#*i/9,[-c&Sk07N4.1Ho(OFHk3FgjP^[D"hRqMC(h%BJ=Z@3YhJhk<Lt*JTjB#n;.L)(.j#Uortu@lKct3dXR);Bjgt%jo:0!(oZJ7]h9i)Z+F0*Dc&\P/Y:2<cl(&XmJ]h+=+A[<kjIC^%ECnK[^=Yee&15aXq;Q99L\ZtDrn#'QAcjW73^!@Q[p.[kDh^1g)W\6H(^RLL@=C$.bN+.J/h\k2/sho_bPC8d11#].J*ATQV7G*B%l;CrGMp%$:Mrhq;@X^&DL_o$e?apJj@4q2+\r[_;H+CRi/shLXHoYENAXG%IdOjk7/G2mmj\dW^(Di"k@^2:RArF/)$bpWg].aW+%:^afFo?6sKHoYQXkO[@hcGSG`h;$<#>gLr*cGa=;3P1Y1B8bGj2OhZgR/*/>fpS8mR@;6cLmRWU0&n/$j"/1eU5pq\BVLM:asb,<%\-U9^#kK_X0n`-f_$(cOcp7gQKYR-qId%YtmUmRtc_E6uDnPed9/#(s]5UEPE-!sZd08^(F4M5,ST</8M7p84G%hb9DJ(l]@(g^6%>%=s?<a&oac%T;hKpeEuM'a'XS?^'N%<bnnTeH(m?L!69l^<bo9XNDH>A^au8kUbcV7KJr[8:p%;c*_[PuC^$V3OqV$$dsQjAIVk%>g?lE6$hdkPt#MfUm,=45`c%X+m&h19E<DU#p;o,gHrasrEg3m4F&eKJ55$-K,"Vf6s`W[]OJt[INm6>I9W?&h0bVI'9p)lAHfRb%J+C]7./7_[&CVT*DT?s*=FHe@Bt++V7h<M8PG`nUH!K`S<em0Z4r^)C!>Ar;rT*dt%@Gpn.3jR#-cJ"D!5H7:'YEt78[I=3^4V4@%%6sh4TUuEEHp7JiY@>!Bo\6PrBVE/RR65u(!pYM)9SV`75/H,E+gBJ[HS:R9<a2diCEhcWlcEXP,a*763C@.Y:L;7\-`*qP1PAi!%qdVR&B1u-Yh]aU#d]8`'DI;kAfZ\ig0JmkQrp%M@Wu'LqZA\U8]?bZXmjCnD2uD4mi<:.\_sU/7g#LgqIX&AP4++a!Dk@KL^ul7&%:uH5t]3fJ@q*,DaX5hO8qjRgA0]-\bnr&!%++F!1rUAt&06RP0oQWm-[Jsbr0<^53YteW^Xaf3/[\Nfnmlmg'=O7O3M"D=KTZ?p'%0@jC0[bD6B5Bh$)f41'EWP)Z"OulS"",DYRBledY7YN#MpNq^Oq$Sfoj#`rar4bl$m<60)TsWe]puoVfJ]Ip;\FffA2b@#Biluo=%A@?ik?#Qn'54%-rFk"*OXD)MCqp"O5']eAnk.%QG@p;J;\EW>>cUSO!n-EsY.f@-lbiYWZT$,Z("cL4gndG^;T/P<b#HeR*ddsr?%?[Vr-,s=Bhml.d.R,jT(B`--EoP_4n*>J8Os+>dD1U,>(?B)`"EOC59"lf%L1[)/lI=-7*h`dYQ%]_;kDV)qZ%1rN2-U@Yh!e+Ap%2QPG6N0*Hl"sX'22#JRgi=E'7oinZ5#FJ)^b_b&ZJm`I,S(A0@,kUj'lM'JSHj[1f*"/8Ls'WZl0M=RJ=QfWn55cS8qcDCR8FCEr%n46tWZhh_"U%!"R%XR[0Nuu@_ki)K\arL!Aq[ZQEhl$^o4/hH]1a)6+X4J<56-51+W&PUVb-9]/s004_5C^<Dm]fXa-h:<:s*q!O%^VUb6b`h,j#H?nbrqi>eBe/-?G'!W^`UZNX]\G^kY1Jo<r[<%QdJ<O".#-nlX]O8<8&rZ/gUmK+CqL]sj/:/Hna1[+_>NuH`D!0+%S>!FXc'u32pT8lAfJk@6T<n09Ifq_"CAn)cV;'nN*),<O"T9DOCZc+R,`=.R63"pUeA'nXnol:L,oXjF=K?9[^Y*7>=<3F*pT)3V%E(t\8E]=aTlb+V%*7fh>pQg55Knl)nn9@g\#^C8Z7_jAo^-5asc\qJML$t(XeaEES"[de<%_CEM%/66`gN&H(2&<jB9f@6Aqlln;%fMk7s]&mCo0-?3u&'*Y0'rG.n5GtX;[UGQFZX'-JfCs4@;r^h!MBIGIb`XVAh:ukE-e,?.S,3l_G'3gPB##-bmT)9kpRZdkbT;fA%8llm5A2fR?'Z9ZZ(D+UJ5ik3*EIE6<@D#o`=1dei;=(=L+-,+#DESukIli*]ant+,s$KY2q+0K1mH+n3N>[VgJYp,s^%#HIrpI#)%?QX`%&,RI#LHE]]f!trOF1jfnXDcD'0KfAEJ*^K7XtI>7CMqekLnai2ALV]LVq'N[8tU4D/_&6D;q`&5RjN!Yg;cLr*)Y8sBferr%=0EuIrs0mO%rVs9X?IT+G0,7U7h#5QT.PVt^AK)$E8fq=]REm0I5MVS$o`lhRU!7[(a?$8_+971h<k.';*qbLK6t;di10fi6<X+k%,ZGt],5p\eXY)aG:A_W[-#p[m$nhCU;K94;TL2bOXsQrZGW,I0hV6tc4rBOmeAkH2KW3Br6U64n)]bXC*Y5cJTMpF<^e8A$V\7=t%@#=`q9,KJ8;5XKWpHS5^[W\[H2Mo<A^e6).N(GKqIWmp\3K5rNe4"ZHqN+Y2dS4$.hd$aY9nVt"F\s3)$'8/o;_=gtZ7:p;KTgR/%]IqX6O0"!M+@KTjQRIorKWEX/=&\C`N&K1oo-8/m)"Y.YIU_bGS/S<+16tGeJse+K?#:cM<c(cM)H@iTqTt:d#F6q)=Djlt<fKjp%%d$/Pj4"AWZ^0a/Y(VD;,E!V0LTZ;,;^5:?PPWX!fjk,Uka)`WkCcG\b<o>ta/K:[,*aPe>m]IU024&r*kJlh'A.&dkc55"#oBIF%gQ5$lLTUaiNL%+CH0@o:'N9:_e;$ssf$c$WXI>Y$R3l#rKuugrnl'i6!@D#+PPkl)bF`eQqA!d==8r/6b6.Z.(Me2eo*[h)'U3eK%8i/DIMW%VRF-J`<B*4p&VDcjZ79qXqaG*tT9M(W,(5GTfBMf^T$l)_ZkJf4_I9E6U"'$04PF&>*(jTBtVH(-:QTSr1lZNDO$N<fo%6TG=)bkK'`ZXXj<p%uiiPDH./^ATu-l?:sge@KK6X+b:;@<fdHD5U\G_SF*7VplrY!3LCTY<.>-1NbAh]=K4(j7Jk&1JUdKNcUI4%XS'9&)Q!O61l$&8CG4a.`Y8_*.YAVX345UN(reS<[#AD*DW,F@HURSBHXPpOb(D(_E.1>:[E^Q:=F^DWAT]9"@&tF]EIjE$"1fQ8%n0=1GnC)V)(/2DCG,3W3<(]2&'W.&[9C3:?-l]E?&Z=%P`-6k<n%@"kN;A-3NGsPET8NmK%-VbSP1"UV6K>$bXFP0e^^joiZ"_#4%K=)2VnmKX.*%CP$Rs>(RMP[P*TZO%p*]1gd$3nW\b7"BVY,C+f#-:HH7nOrnG%s8f$+"6FXm\_ZDbNU7TD\,HI]c3JXb,MU?;<l7%QE1//KLVkI<t'-[V5ejcTVnRi7'ppo*_dlhE>$l,UI,3fTpCE&i^JBE&+$N$.['[49H(ob!_]36@Z4a@6A=WM$oHB>PBq0LFM`U%%ZjE8LN*Ib0n47IJ<Ca*ue<&JC@Ur/Pi$Bd2J;RM<,*;a,-T&hN)g91S0;]rY5a\#Jj[4ePE8Ep;?!WhP7QW\lYu-+a0krS+!H6gf%<A4YIOCL6TAa$Osnhu4[>$r&/SV#gEh'h22lE'6L/f:Lje/cH<?8PbZ-$ucFd%Wce^hRXeBI.,4"i2Re$^_H2p6Yh!UJH2r5bU8R%:SDj(4&3RgGL#q<3MVY62B^Baqlp/@"AtHQC,`4kB[fuu4UsJk4u*97aO0&f_naEG-1._(6_JuAhrp)\;65aLj_G:bEr0-G]L?r@%1pKle=-%quDaDbr#>8sUQ/S+!8l*nu@u**3_Pd_K=N%TU-En7`irle51>NTK@1lNn]c`u<p<c^mTL?k'Z@EDnMG,&+8t$<HQ4FQ:%[XsU6F-dkf_W7TB;Wr'T-k/%B1%=CZ!YQ4RL*7-[P1=6T.L+pM*N1p*DQRC]^u;TE0F_9kU$$GW'aJGf*r[AX>8mJHhK>_(d&XI@%PsZf8QaB<I9Na]DITVJarec9i?t1*0Qnq<(JOr<&j&u)1/=KIIjQ_]L]E!Ns$Hp1T_r4MK%drQ19/<cfM323"*O:>k6GAFI#^@F"%6"86t7ieY,+N=u8-.=/[NMljHW1de(<?YK(JqS\?8)LnZ!!7NtL7fheMeBpm?dSW\9nF/>]Uh/]Pd2pP5bg-(Q%AA:cco!c:CpC>%-*)g$^E=G'eu)]g-?T;>#b,IX`r;,#Z@o&C&dV<cRVGJE1ng/#]G+%tJF4Sn14_p(+uoO/ftX+4$l%QE:&QA<7PTf<3"j[YSiG"&%&()Y/a[)r"GZ$[HZ8=#;W^rj_31P`*'ThM"aT*W=kt#p5>Yba7`kmWGNM:-=2BWjF7&-@$bj?`V_q;o.FiU_(14#H17X)Oj:`1?c%f1X*8'_UBWU5k7DX_40-6B+@6At``DlY$dlP(nFb$Xbth5;3g=s+ccD1;I#.>255Q^c)(7Jq4u4-qR4MrCIh3bd`+Anc?\oH`U)b%qE:[b/6Lu"Vfdb=VHX6.N8n?\71c!6K,"M?'J`"a?84lQJAVjMUMGPtAkS=\Q5a:(md5>;0EZA/Aj/*eUM'23p==$]OHde`PUT#`%<mDPo7_oO,W!\_dE?]9\L@,^7l<(_0=ISf?MJ<uiG`QR_MIBUtPr>`jL+oJT(,<bu1c/NS_[LN(j(>HF.Ykhg.oe%E/Y2KWS^n5N%b_'JZBX[Y20[d88pD4ZI>qH52JVl`XJlQ09eK)K[gqpW,(9L*2Wm?[e1$h<#0t^IToF+%lmB,aaO-1*n,6B;&#gQ<D^u-E:Hd%(p%<S%g6"^lY'QS'R!Hl#j4"^[)NrT&%r..E"`Q*n^KUL4V2L?M&DjVsKu*6P'kB9au8pJnPhJ:dl_InB_u<sOBT(jouX0VK%CB,[X$%5@5rl?>*gScK5,s5,`J=ZI8jen5KO4bQ*2r)<O&g/Re?3AARIZf[U80=*_Z7"bYcWh)`JXBHh+,jt0JS'RTRb"rIOS)J)bRVD&6g%W$XL7.Wu):$Y0mZ"[gVWa[fo.#.=l+7b<C?0l?Q(eMuZi8WDj]An\"+":$YOEeBb;$tu$jM]ugCd]8bn.`)>?YTc&ZQ:r\R3$X=D%cNKTVic7,S[#,;:f'&Cf`E)7[W>2?<#^aQ!fH#^?:C1&mBXHa]R*7&,6ros10l4jN?\O57)VmudP0P=r`m,;TX-dZ9-W\9^ZeK+P%(fg`EAHM7LN'XQBg;=cYfb01S:8SDPImT`#Q\r$`CY^_Hmj2EGg2d[71Fh!:9+5V&JMZVWPE0*gEM:H>l:8(e\?rgl(n3+BQ;NT\%>^.4*:)=o6e!'OG"p2I^X*W0Gs!kYg%9">!0Vo`uK>iL#6eiB',)ioJ<e=*.FgFG,LMMB5LFZYhM)/=,Pi+R;_U>V#*d9^BBs#26%LlqSYa:e]d.K"l8/4[MOnAZ(G'nbVb6eI27i:Z?3!5sEu9MH:]0!6P![,tMiE7<:T^k6)"c?@:C0u_':#]dYcpB32q(n]1N=:2]a%-ZFR1Q%C,$jGYK>G7CJo0nXL;N1F+>24?j@L=D<P@6#T&R^=:K:Tgf,\?M/I>23J\&Xl\#%'40s[>5Y#A#s8S0g]'"^a!<gk=fP$%0sOLd7<N=<IgA>>kP,,35a(-'+p9tc[YU:o2'QX7Nejr)0/<,t,%?;VLq$k>,"ASGY1F5<K^!R-S0ML=P8'4G_VGd&>==FM"+d]>%&b3Cmd7aS-4?84R@WDX:/-7%NVtQ=?iDCRH/5r2U5l"1"^eNG;Feq@8PY#$n,:GQ>5_VP#&T!i+\mVb6c<In\(>)tcU_ejg<C-l6%949AT2@+8!,lUW4&L""e`3[YCTcRJO,1Al:a[_V"Ouu!F$oaH2YS:<fbJ7"l:%H(/KM!4uO]'(@m_aV/KSC`\%hiZqI5N(*-?d4;%CL4$FMp?C^r@hbVA0V<hHssK#0a_5SF@I2cbfJh)]%+Mf;DbHmh,\_.j+\Cm"s0N*HGP-QlFrU><PsW>o_;jP8$KRR@U7s+HN^D8%-`]=\2<3G))9!H5Ksre<)[2(4Bcm4L^^RX#r?rA]m4&][L$LFKUQ"Q1:5s7Xm2*Wo0aaUlg0kl:g9)&tFk<Ht&lTLMDm/^iL398A%)u.iCDJD!2(HuGGaOD=VZs`\0NQ8c7[+s0h3=fe\QW!&?jB4pKL*>*s0J&\33\b(`bCNK>g3#K<L]tb=-UbKq#ui`=`1P?S<&QUi%F_fPCYoJ`Wc.6:_dBdY.j1*e]XYB@lG%n?NHXp]o2%6ImL1/cd+MTX#[X;J$R^+HgerUS<E[-o#r"`L(]SRV;B3TF0j!8p*h0#8U%W@:@M?,hG(D8pAL5XbVXen2Q\WL<Meen0<14+a^T?YLCsR]]`K`ir5<+U!DEml!2qLaf<%dsm"elgu9\?IqJ,VCXm4'^17uD3L^q%eY?VNp?8`1E*_-D#=GL]a0=pX&P\E7/%)W\=L@iM#L[:Vi+6<A`OmQj/fc-.BYMT>&=lm2/feD-PncYbs/&9ABf\T\;DD5q;4XH.%=pF^nN,&>36`NAkYjB\5B3qnb%Ydr4Y$o;A6^g[TcI*uTbueho*=g"sY_JK2:UFXJd@WdpUpAeda147%*kT9g36jid+7oYrS<Ea,%I7+P9^LC7aK:_=XXT[5WCmc?"=NurIFqb&7KOmPqFiQ0P5TCs>P`0"_DJ!\fC6[fH!)/;?aThiFds)L_PuZc*Le,L(ZW?jkP-k>?%Xhuj(JX)n/)dm!+PP/h`5T#?F,Bkl6OF9`-3]?(TJO"d+L1jVaj,@E!R+51re6oJBd];u>-(L4X5@C@RNrpG^d4TTq<t)JilB2h4%G`8B7Cmkc<?(WmIUDOpUFD<oZU)_')Ippdi2faAClnPlHYohW@gDJKNXFt9AC"81E*o-9dF];G$E=<[Ef,Y&m>d+/7f3CH'4c1rq%'ppOd+2Jf3J;Fj7JPdP.j%gLEXGpX9ZN@J@7am\GI7h3.EX\"nA'.p3;)^r/"Zg'?okgeSLn\1(9Gu:`#:fu,`C7`aW^,u(jdn8?%nJJ:&gp;-[:\&X3D[!\KPdo:qQYL&tL<c0uY)2m<qj/>T"YqOQNO>>=T0[%1A0d9J+faV"nj/Dh;F;;U"iFmQcZ<P_GZ+dbAhX\@%`]+"N,T6)O=IDKtC#kL3^-Q@Ig5`7\ED'GF-Z-%;QnOe,'E,9UPVDBh5oOgl-`X7r3\8`;LWT8HY[O]gKW'7aPWYD4YQiNm&3`lA%KJUL;/N/P"%4br0PNWu:lPXs"l"o!#<0n\-Es/6hI+gHVP`0'f>RG+Rf]b63P;h-,2[oLe<&Y4#/!m+])'2=l*23g>"]?+SL3VMT%:)R4tBIYY`9h\\*hAr3D:qC!mn-BCrB9tsC"Bh651r>Ut"$d5VLPq`<Sts@96]?;J?s3qbjI"IP2\d!;i0A$#bM'OH6H:3/N^WN5%n`Wujcr&A%V6D7S1t,GEQ9#*S=g3Hi;E>I\g,:?H?f[e:-`fC,"lRAYnm*pf$k-*K3AD*)2Zt!h8_=6`!,0T9Tno4^K]mrC;2Zl1%B,e/7$B_To&PC*h+6,OKBe3p#mO$i>;;ZnITg2Zg$CDVako)h&<6@1r?l>VifWF-="GSVWjX7,8!L\6:_h3@$5[GUW"DYk%2\<#?%&UVM_3?ed?E@*DW0@4!]&EbA^:#\#l.`X60%NK\86)t+E.cD5_/csiN7\^*W!lNO:I7dj,URW_@!Y;Na\QNm%;U5M>/Og9)5m'T:%l?Up#fFD/P5W9hTPR^lp>JcWC8V%SL225Kg]:4?'#kf=c/I.^0&TUV/ObGX)Pf0)fa)7T#g_!tN`-EB.?H#%*F`;Sg45sB^9Dh0?%QMSMFmkt=GK/c_PKtn);&sQ-O![%nIg'Z"OSc;.fga271_lA^6UX4.\'bCQjSTeo)31FSZ*\:XX\0-XgLfXaa.A32S5Z'U*SjR9!%EXZ\X**3QM#RVJSneA?ZbjbMCWBY<<6P@GjTGuWXAX63CGh3#un#W<.O'9-3E[TpifGiBE+KCn6Gk?V\18V)iS'76"_B$0aN7Go=%&pR6#'OqL-g)IquH"aRD@BFG/D%,_W'ma,PFQB1sDAb9[6?U*]`s,=[8MuO5\d%WjBKqM3$<qje=Q?p=15<%G/A-sNV`#,l0-.]?%H@!ah9Y(4VG_-nTmUVt"/o/n..F'90F>BE[V.<(HKa5CJ"k[!n8=LD)_p)RMXt.qKL,QqaIr$08.O?Rf93',-95"1Q'6=?gbW+9s%?8.be_M;*_npSd<1eO32_CJ8GGZMt]h(Y/&<"[E$`UFkG:ZE\ibOs,K[ZPGc(TG8h=K0G;C$CR@((fEGgYepo('$HA/9=<q!PfA\%MKOLuNFd&,l+D_6]F\tp#&aAYd]@r;Wq?VK,btF7NZkut^:4),P1Gqc!jZBnbkr](Uo_f<,:75Fr`q^5g<;dQS&UA)9q_p79^@5h%-j$mWkZ$6VXa`dLX=I>Q5PjBb-t_)943s4FHtqA;DYsm[ebJ1(&A$T8N;o;re)=pF7RD'bfu%Y<+a`6V0kTFllOGt9A%Z\QC#DjI%RAAEj(tMAcULajDFUN+t=D.QFc+X1K;5U,AFt+qr;cV_E[+j4)g>e`dkW8*da?W4mGptjb,*GV_r\G5s0pn4R/T)E^?9mn5rW4Mn%C(+t[2?^G1)cDEFKrKuTDZu3H,S-kf,9XkAhGRecj'u._VW01_=G(7G0d8<s[OD8]KK2J8PAWW&7q7UjAf6c6dfM+\a7GdO]4?FW%`9"Ruld6^AM<cnYo#Ym(RGT0MiW6,\+T064Q`7G._>n'7+risD3_,Ao:)JdFLa52WMUm%U5fCnt525R+:GA*$_G#uQKP1d*:g'<O%#n]q[24YDG9'>G53Y0/G/BiNH]c^30jNDPN6A.\K:=19R\o:m?kp@i<ZOLV\[URe26;,H(-3ih^S6/paC;KF,G[3*tAn@)dgrJ>R%(,alZpUODZJ-g.lR?^4$l2#d-`l^#7fmk$7J_OXM<&,\fT:(Nf827?q"pA:a8Mf:q([!iI,<aHE6A=*-@?E;/<+fXc`1)EtnQN6e%/1_Kk<qMD[`L&NBP*/XO&?CY#7uSC@R,tAcNBkaK2Cc_N<jcs*L2ks?(E^/:HV7EgS2+BKb:kW#`lJVl#ohY06R:j:M@N$JAI-b!%8d$6'>c(O/!cso,-ahHcdbeNN0K)C.@$OTM@'Y0OVI=.%_*k.A<#:lZ>3j*N*joX@@ND]$:`I7+gZ!TWdmtF"EP"IGDsi8+G@:cp%?ioVXM%V^P"W54gQqAH1==8;!^:uCrUB\2_]^7P/@BF1!+^]E)cEK2EYV,>)O(21B=ktg6VNVoMUKHQdnhu5FUS*.ABR?.T6n`pH%@2m3G;(c/%)oijEXmR%W3)Oq[1)muLXDq-P*lCai7GNUd!C)'b7hCCHq<iru1d<a=`A(2)W<m?_a08aV*4/5,=0CuuQZ1Q#<1qfS%X#Yp>IW415W5s]<og)+0pi&'k=f[E[CK3nSAdCIUGc6B8X2]*1V=<tmjCYS>buc]Z8I<%@l,TK4W[^sW$oTCP$XajGbu,^7.1'0N%Q-lT`[IJ%@l>0-imss?0l"h`j'[c^G'l1E1;DDjs>[,Wab++cq)#ii*%DuI!'rC:0ns2!^@)2e/3Xtj(6M5ana@t4G3_ZDD-!3)U%qCE=d;"8,n`dH/:Cje'5%\,3;1O>8`'DsiD@a\c#g].r?V\osFWlm>*FS9qg*h[EW#0k$7].S@UK81M)"=XFW\o;>)Z3hIPYi4d1%I4CC:3N<(brCAkQTO;[mBp2=I4+ib7:K^DUmOg3s:NW(J>DHYZjVhsW(LNf/%D##-dU7_Z3*iQ&,j2P?lXC&]hbMuYb"-a-%I\po%_%V'-"32[r!^(,AO<E"lPj8Xn$Es4*!nt5cEiApk3Fo.W'Mdjc)b[-PWY5F$:F\"Z&_LijM?ka;ZoUV\!l*$u&=K\>?V_SpRi6NJ%K(c\Co."l3-K8;@*=5k*ZIjJO8ng;+Jp5j?#/?1J9FFo\rWQdV;X9?Oh)IDsh*"Onj1QJWe$s;AMIDKbgq4.]NallW`ksV^F;r-O%>28D'@81F#Q;O`'>^7:+\l$9$<Qd#g^l(+!EaI_A'2N<3G`^-ki_t(V>P:-gpn:2$Aae%*XUX*M9\2+300%*rLbtZ=9QtCd;atpI%`M]_CeM)mRYoa%.-gQ`Zle6@`JRNf;d.IUhbHgNPYg^F`+iQ!-e@k\_]I)8Y\/N@I/p54=;o^BGV`$lF_,7#S=R_>#`g4Dr_\c.B%=OQPM%?0qE$I^6V;-;4H7D+B5I(q/jok`?!k*Sn`0OGOqF%5\"1"(38^fElh6jg'NWn:`o<CATqii=8PO%TZ&<lKg#<O#tD<K)0T%8[C8cLIQX@YDRJp\Yr7LOtOr-nS]`l>4e'XB<qh=/.0]WUr7$:fLjPQ[OQ;KXbm^=Hf`q\#lRolqGjfJeQ0XF>)Q7<+mfk`aqiG4%q+f'9CCT35&<B?Aa0@OMTJc_u@;Qi#W'\ZE`eRk.4TFhOg(pl0=B-+Be2T&Lj9a_M5XYq#ODCd"F.H38XV=kD-^2%gD9J$0[UiQ9%gEHe4kHhO46X&30@6&1_<(Ra*65Hba(a0`ZkbO\@X;$,<a0;p&+ssU[gOdMrc?Z"hV2AT`X=Z?uKO@A8,QTHriaDhM/j`nPH4H(6%D&H7"[LF^#>O'M6KM^Bg+Z4,[Yai-jU9%n[+!a[`)1pBY>ngh'I+`/W=^+:gcWfcsCO<'Yl(SZd"Qc.WeeTpse3JrA%'pG$.i$ob%Yqds]7EmOL+FW0_#%!=fEuR,RbE/1"D-0B`@S??)XsO>9cbsKY=lJP-[I6`HSm%6tVJV1'i4?9I@3XlAEnV9`@00*V@U%9'.U.11%.P&p2M-VS.I'g74ESHS@\n+u=hI9.B/4LASUlXVZa]jp]nQb^OkE<MI?4;:SL1P;L`LMVMdq)p!(c@o=+T'oP;8\hUW"iVdaoUfG%`p2R^UYaD%:c"B<[5"b/QAgt]XOXGCNF=3[#[SC3<p=K='\F$MFAFjZ#(D)Q*K%`"5LEB(%)X_fae!.)?NX@m,g1MaB[gL;iXh_\%=0Io%II3C9d[0fIkF\tET2KFcR+-E3]M@I_TR:=ENJ$rdC',]n?qg1s0<o6a#hF[ZlAf:iNQ(BNp5:rKfRO^*a09I"9`>kSkDh_g%k^0R6N;&8m/Z0:`XS%MWMM8O#@'"7>AIRTu[tBS*fAH&gg0`=DNU[&,eP69tgHX9YjMgE/qWl%6ZN\5&gol03&$+N(Ip=#GGOPh:%&XN=SridI3hsPt\"KI^G:S(g=Grb[2VL<%k~>%AI9_PrivateDataEnd